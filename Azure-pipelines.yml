trigger:
- master
- Development

pr:
- master
- Development
  
pool:
  name: Default

variables:
  image_name: mcr.microsoft.com/businesscentral/onprem:1904-is
  container_name: Kappi
  license_file: C:\AdvaniaGIT\License\6433432-14.flf
  QA_path: \\bc-acc01\c$\Artifacts
  QA_host: bc-acc01
  QA_instance: bc
  QA_tenant: Kappi
  PROD_path: \\bc-prod01\c$\Artifacts
  PROD_host: bc-prod01
  PROD_instance: bc
  PROD_tenant: Kappi  

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      name: Default
    workspace:
      clean: all       
    steps:
      - task: PowerShell@1    
        displayName: Create build container
        inputs:
          scriptType: inlineScript
          inlineScript: >
            Update-Module navcontainerhelper -Force;
            Import-Module navcontainerhelper -DisableNameChecking;
            $Password = (New-Guid).ToString().SubString(0,15) + ',.!A';
            $Credential = New-Object System.Management.Automation.PSCredential($env:USERNAME, (ConvertTo-SecureString $Password -AsPlainText -Force));        
            New-NavContainer -accept_eula -accept_outdated -containerName $(container_name) -auth NavUserPassword -credential $Credential -image $(image_name) -licenseFile $(license_file) -doNotExportObjectsToText -restart no -shortcuts None -includeTestToolkit -includeTestLibrariesOnly -updateHosts;
            Set-Content -Value (ConvertFrom-SecureString -SecureString $Credential.Password) -Encoding UTF8 -Path 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\My\Container.info';

      - task: PowerShell@1
        displayName: Copy source into container folder
        inputs:
          scriptType: inlineScript
          inlineScript: >
            $SourceDir = 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\Source';
            New-Item $SourceDir -ItemType Directory;
            Copy-Item '$(Build.SourcesDirectory)\*' $SourceDir -Recurse -Force;

      - task: PowerShell@1
        displayName: Publish and install dependencies into container
        inputs:
          scriptType: inlineScript
          inlineScript: >          
            Import-Module navcontainerhelper -DisableNameChecking;
            $SourceDir = 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\Source\Dependencies';
            if (Test-Path $SourceDir) {
              Get-ChildItem -Path $SourceDir -Filter '*.app' | Sort-Object -Property Name | % {Publish-NavContainerApp '$(container_name)' -appFile $_.FullName -skipVerification -sync -install -language is-IS}
            }

      - task: PowerShell@1
        displayName: Set Build ID in app.json
        inputs:
          scriptType: inlineScript
          inlineScript: >
            $SourceDir = 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\Source';
            $WorkspaceFile = Get-ChildItem -Path $SourceDir -Filter "*.code-workspace";
            $WorkspaceFolders = (Get-Content -Path $WorkspaceFile.FullName -Encoding UTF8 | ConvertFrom-Json).folders;
            $WorkspaceFolders | % {
              $ExtensionAppJsonFile = (Join-Path (Join-Path $SourceDir $_.path) 'app.json');
              $ExtensionAppJsonObject = Get-Content -Raw -Path $ExtensionAppJsonFile | ConvertFrom-Json;
              $VersionParts = $ExtensionAppJsonObject.Version.Split('.');
              $VersionParts[2] = '$(Build.BuildId)';
              $ExtensionAppJsonObject.Version = [System.String]::Join(".",$VersionParts);
              $ExtensionAppJsonObject | ConvertTo-Json | set-content $ExtensionAppJsonFile }
              
      - task: PowerShell@1
        displayName: Compile app
        inputs:
          scriptType: inlineScript
          inlineScript: >
            Import-Module navcontainerhelper -DisableNameChecking;
            $SourceDir = 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\Source';
            $DependenciesDir = 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\Source\Dependencies';
            $Credential = New-Object System.Management.Automation.PSCredential($env:USERNAME, (ConvertTo-SecureString (Get-Content -Encoding UTF8 -Path 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\My\Container.info')));
            $WorkspaceFile = Get-ChildItem -Path $SourceDir -Filter "*.code-workspace";
            $WorkspaceFolders = (Get-Content -Path $WorkspaceFile.FullName -Encoding UTF8 | ConvertFrom-Json).folders;
            if (Test-Path $DependenciesDir) {
              $WorkspaceFolders | % {Compile-AppInNavContainer -containerName $(container_name) -appProjectFolder (Join-Path $SourceDir $_.path) -credential $Credential -appSymbolsFolder $DependenciesDir -AzureDevOps -FailOn 'error' -CopyAppToSymbolsFolder}
            } else {
              $WorkspaceFolders | % {Compile-AppInNavContainer -containerName $(container_name) -appProjectFolder (Join-Path $SourceDir $_.path) -credential $Credential -AzureDevOps -FailOn 'error' -CopyAppToSymbolsFolder}
            }

      - task: PowerShell@1
        displayName: Publish and install app into container
        inputs:
          scriptType: inlineScript
          inlineScript: >          
            Import-Module navcontainerhelper -DisableNameChecking;
            $SourceDir = 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\Source';
            $WorkspaceFile = Get-ChildItem -Path $SourceDir -Filter "*.code-workspace";
            $WorkspaceFolders = (Get-Content -Path $WorkspaceFile.FullName -Encoding UTF8 | ConvertFrom-Json).folders;
            $WorkspaceFolders | % {Get-ChildItem  (Join-Path $SourceDir (Join-Path $_.path 'output'))} | % {Publish-NavContainerApp '$(container_name)' -appFile $_.FullName -skipVerification -sync -install -language is-IS}

      - task: PowerShell@1
        displayName: Run tests
        inputs:
          scriptType: inlineScript
          inlineScript: >
            $Credential = New-Object System.Management.Automation.PSCredential($env:USERNAME, (ConvertTo-SecureString (Get-Content -Encoding UTF8 -Path 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\My\Container.info')));        
            Import-Module navcontainerhelper -DisableNameChecking;
            $ResultPath = 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\my\Results.xml';        
            Run-TestsInBcContainer -containerName '$(container_name)' -credential $Credential -detailed -AzureDevOps warning -XUnitResultFileName $ResultPath -debugMode

      - task: PublishTestResults@2
        displayName: Upload test results    
        inputs:
          failTaskOnFailedTests: true
          testResultsFormat: XUnit
          testResultsFiles: '*.xml'
          searchFolder: C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\my

      - task: PowerShell@1
        displayName: Compile app without test
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))        
        inputs:
          scriptType: inlineScript
          inlineScript: >
            Import-Module navcontainerhelper -DisableNameChecking;
            $SourceDir = 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\Source';
            $Credential = New-Object System.Management.Automation.PSCredential($env:USERNAME, (ConvertTo-SecureString (Get-Content -Encoding UTF8 -Path 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\My\Container.info')));
            $WorkspaceFile = Get-ChildItem -Path $SourceDir -Filter "*.code-workspace";
            $WorkspaceFolders = (Get-Content -Path $WorkspaceFile.FullName -Encoding UTF8 | ConvertFrom-Json).folders;
            $WorkspaceFolders | % {Remove-Item -Path (join-path (Join-Path $SourceDir $_.path) 'test') -Recurse -Force -ErrorAction SilentlyContinue};
            $WorkspaceFolders | % {Remove-Item -Path (join-path (Join-Path $SourceDir $_.path) 'output') -Recurse -Force -ErrorAction SilentlyContinue};
            $WorkspaceFolders | % {if ($_.path -inotmatch 'test') {Compile-AppInNavContainer -containerName '$(container_name)' -appProjectFolder (Join-Path $SourceDir $_.path) -credential $Credential -AzureDevOps -FailOn 'error'}}

      - task: PowerShell@1
        displayName: Copy app into build artifacts staging folder
        inputs:
          scriptType: inlineScript
          inlineScript: >
            $SourceDir = 'C:\ProgramData\NavContainerHelper\Extensions\$(container_name)\Source';
            $WorkspaceFile = Get-ChildItem -Path $SourceDir -Filter "*.code-workspace";
            $WorkspaceFolders = (Get-Content -Path $WorkspaceFile.FullName -Encoding UTF8 | ConvertFrom-Json).folders;
            $WorkspaceFolders | % {Copy-Item (Join-Path (Join-Path $SourceDir $_.path) '\output\*.app') '$(Build.ArtifactStagingDirectory)'}

      - task: PublishPipelineArtifact@1
        displayName: Publish pipeline artifact
        inputs:
          ArtifactName: App Package
          targetPath: $(Build.ArtifactStagingDirectory)

      - task: PowerShell@1
        displayName: Remove build container
        inputs:
          scriptType: inlineScript
          inlineScript: >
            Import-Module navcontainerhelper -DisableNameChecking;
            Remove-NavContainer $(container_name)
        condition: always()

- stage: QA
  displayName: Deploy to QA
  dependsOn: Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/Development'))
  jobs:
  - deployment:
    displayName: Release
    pool:
      name: Default
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 2
    environment: QA
    strategy:
      runOnce:
        deploy:
          steps:               
            - task: PowerShell@1
              displayName: Copy artifacts to release directory                  
              inputs:
                scriptType: inlineScript
                inlineScript: >
                  $Path = Split-Path '$(System.ArtifactsDirectory)' -Parent;
                  $Artifact = "$Path\App Package\*.app";
                  $RemotePath = Join-Path '$(QA_path)' '$(container_name)';                  
                  Remove-Item -Path $RemotePath -Recurse -Force -ErrorAction SilentlyContinue;
                  New-Item -Path '$(QA_path)' -ItemType Directory -ErrorAction SilentlyContinue | Out-Null;
                  New-Item -Path $RemotePath -ItemType Directory -ErrorAction SilentlyContinue | Out-Null;
                  Get-Item "$Path\App Package\*.app" | % {Copy-Item $_.FullName (Join-Path $RemotePath $_.Name)}

            - task: PowerShell@1
              displayName: Deploy App on Remote Computer
              inputs:
                scriptType: inlineScript
                inlineScript: >                  
                  $RemotePath = Join-Path '$(QA_path)' '$(container_name)'; 
                  $WinRmUri = New-Object Uri('http://$(QA_host):5985');
                  $WinRmOption = New-PSSessionOption –SkipCACheck –SkipCNCheck –SkipRevocationCheck;
                  $Session = New-PSSession -ConnectionUri $WinRMUri -SessionOption $WinRmOption;
                  Invoke-Command -Session $Session -ScriptBlock {
                      param([string]$ServerInstance,[string]$TenantId,[string]$AppFilePath)
                      Import-Module 'C:\Program Files\Microsoft Dynamics 365 Business Central\140\Service\NavAdminTool.ps1' | Out-Null            
                      foreach ($App in (Get-ChildItem -Path $AppFilePath -Filter "*.app")) {
                          Write-Host Publishing $($App.BaseName)...
                          Publish-NAVApp -ServerInstance $ServerInstance -Path $App.FullName -Tenant $TenantId -Scope Tenant -SkipVerification -ErrorAction SilentlyContinue }
                          
                      $installedApps = Get-NAVAppInfo -ServerInstance $ServerInstance -Tenant $TenantId -TenantSpecificProperties | Where-Object -Property IsInstalled -EQ True
                      foreach ($installedApp in $installedApps) {        
                          Write-Host Looking for a newer version of app $($installedApp.Name)
                          $availableApp = Get-NAVAppInfo -ServerInstance $ServerInstance -Id $installedApp.AppId | Where-Object -Property Version -gt $installedApp.Version | Sort-Object -Property Version | Select-Object -Last 1
                          if ($availableApp) {
                              Write-Host Upgrading to version $availableApp.Version 
                              Sync-NAVApp -ServerInstance $ServerInstance -Tenant $TenantId -AppName $installedApp.Name -Version $availableApp.Version 
                              Start-NAVAppDataUpgrade -ServerInstance $ServerInstance -Tenant $TenantId -AppName $installedApp.Name -Version $availableApp.Version -Language is-IS
                              Unpublish-NAVApp -ServerInstance $ServerInstance -Tenant $TenantId -Name $installedApp.Name -Version $installedApp.Version
                          }
                      }
                      foreach ($App in (Get-ChildItem -Path $AppFilePath -Filter "*.app")) {
                          $AppInfo = Get-NAVAppInfo -Path $App.FullName
                          if ($installedApps | Where-Object -Property Name -EQ $AppInfo.Name) {
                            Write-Host $($App.BaseName) already upgraded...
                          } else {
                            Write-Host Installing $($App.BaseName)...
                            Sync-NAVApp -ServerInstance $ServerInstance -Tenant $TenantId -AppName $AppInfo.Name -Version $AppInfo.Version 
                            Install-NAVApp -ServerInstance $ServerInstance -Tenant $TenantId -AppName $AppInfo.Name -Version $AppInfo.Version 
                          }
                      }                             
                      Remove-Item -Path $AppFilePath -Recurse -Force

                  } -ArgumentList ('$(QA_instance)','$(QA_tenant)',$RemotePath);
                  Remove-PSSession $Session;

- stage: Production
  displayName: Deploy to Production
  dependsOn: Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))  
  jobs:  
  - deployment:
    displayName: Release
    pool:
      name: Default
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 2      
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:               
            - task: PowerShell@1
              displayName: Copy artifacts to release directory                  
              inputs:
                scriptType: inlineScript
                inlineScript: >
                  $Path = Split-Path '$(System.ArtifactsDirectory)' -Parent;
                  $Artifact = "$Path\App Package\*.app";
                  $RemotePath = Join-Path '$(PROD_path)' '$(container_name)';                  
                  Remove-Item -Path $RemotePath -Recurse -Force -ErrorAction SilentlyContinue;
                  New-Item -Path '$(PROD_path)' -ItemType Directory -ErrorAction SilentlyContinue | Out-Null;
                  New-Item -Path $RemotePath -ItemType Directory -ErrorAction SilentlyContinue | Out-Null;
                  Get-Item "$Path\App Package\*.app" | % {Copy-Item $_.FullName (Join-Path $RemotePath $_.Name)}

            - task: PowerShell@1
              displayName: Deploy App on Remote Computer
              inputs:
                scriptType: inlineScript
                inlineScript: >                  
                  $RemotePath = Join-Path '$(PROD_path)' '$(container_name)'; 
                  $WinRmUri = New-Object Uri('http://$(PROD_host):5985');
                  $WinRmOption = New-PSSessionOption –SkipCACheck –SkipCNCheck –SkipRevocationCheck;
                  $Session = New-PSSession -ConnectionUri $WinRMUri -SessionOption $WinRmOption;
                  Invoke-Command -Session $Session -ScriptBlock {
                      param([string]$ServerInstance,[string]$TenantId,[string]$AppFilePath)
                      Import-Module 'C:\Program Files\Microsoft Dynamics 365 Business Central\140\Service\NavAdminTool.ps1' | Out-Null            
                      foreach ($App in (Get-ChildItem -Path $AppFilePath -Filter "*.app")) {
                          Write-Host Publishing $($App.BaseName)...
                          Publish-NAVApp -ServerInstance $ServerInstance -Path $App.FullName -Tenant $TenantId -Scope Tenant -SkipVerification -ErrorAction SilentlyContinue }
                          
                      $installedApps = Get-NAVAppInfo -ServerInstance $ServerInstance -Tenant $TenantId -TenantSpecificProperties | Where-Object -Property IsInstalled -EQ True
                      foreach ($installedApp in $installedApps) {        
                          Write-Host Looking for a newer version of app $($installedApp.Name)
                          $availableApp = Get-NAVAppInfo -ServerInstance $ServerInstance -Id $installedApp.AppId | Where-Object -Property Version -gt $installedApp.Version | Sort-Object -Property Version | Select-Object -Last 1
                          if ($availableApp) {
                              Write-Host Upgrading to version $availableApp.Version 
                              Sync-NAVApp -ServerInstance $ServerInstance -Tenant $TenantId -AppName $installedApp.Name -Version $availableApp.Version 
                              Start-NAVAppDataUpgrade -ServerInstance $ServerInstance -Tenant $TenantId -AppName $installedApp.Name -Version $availableApp.Version -Language is-IS
                              Unpublish-NAVApp -ServerInstance $ServerInstance -Tenant $TenantId -Name $installedApp.Name -Version $installedApp.Version
                          }
                      }
                      foreach ($App in (Get-ChildItem -Path $AppFilePath -Filter "*.app")) {
                          $AppInfo = Get-NAVAppInfo -Path $App.FullName
                          if ($installedApps | Where-Object -Property Name -EQ $AppInfo.Name) {
                            Write-Host $($App.BaseName) already upgraded...
                          } else {
                            Write-Host Installing $($App.BaseName)...
                            Sync-NAVApp -ServerInstance $ServerInstance -Tenant $TenantId -AppName $AppInfo.Name -Version $AppInfo.Version 
                            Install-NAVApp -ServerInstance $ServerInstance -Tenant $TenantId -AppName $AppInfo.Name -Version $AppInfo.Version 
                          }
                      }                             
                      Remove-Item -Path $AppFilePath -Recurse -Force

                  } -ArgumentList ('$(PROD_instance)','$(PROD_tenant)',$RemotePath);
                  Remove-PSSession $Session;
